generator db {
    provider             = "prisma-client-py"
    interface            = "asyncio"
    recursive_type_depth = "5"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Document {
    id        Int                    @id @default(autoincrement())
    embedding Unsupported("vector")?
}

model ForgedAI {
    id                           String                         @unique
    product                      String?
    useCaseTwo                   String
    useCase                      String
    createdAt                    DateTime                       @default(now())
    updatedAt                    DateTime
    embedding                    Unsupported("vector")?
    Marketing_Creatives_Document Marketing_Creatives_Document[]
    Marketing_Plan_Document      Marketing_Plan_Document[]
    Trends_Document              Trends_Document[]
}

model Marketing_Creatives_Document {
    id          String                 @unique
    content     String
    url         String?
    embedding   Unsupported("vector")?
    creativesId String
    createdAt   DateTime               @default(now())
    updatedAt   DateTime
    ForgedAI    ForgedAI               @relation(fields: [creativesId], references: [id])
}

model Marketing_Plan_Document {
    id        String                 @unique
    content   String
    url       String?
    planId    String
    embedding Unsupported("vector")?
    createdAt DateTime               @default(now())
    updatedAt DateTime
    ForgedAI  ForgedAI               @relation(fields: [planId], references: [id])
}

model Trends_Document {
    id        String                 @unique
    content   String
    url       String?
    iaId      String
    embedding Unsupported("vector")?
    createdAt DateTime               @default(now())
    updatedAt DateTime
    ForgedAI  ForgedAI               @relation(fields: [iaId], references: [id])
}

model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime
}
