generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  api_domain        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserType          String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int                 @id @default(autoincrement())
  userId             Int?
  name               String?
  externalId         String?
  brandName          String?
  firstName          String?
  profileImage       String?
  isActive           Boolean             @default(false)
  brandLogo          String?
  password           String?
  image              String?
  lastName           String?
  isVerified         Boolean?
  provider           String?
  email              String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  profileId          String?
  role               Role                @default(MANAGER)
  accounts           Account[]
  profile            Profile[]
  sessions           Session[]
  emailVerified      DateTime?
  userType           String?
  verificationTokens VerificationToken[]
  recentUpdates      RecentUpdates[]
  campaignHistory    CampaignHistory[]
  team               Team[]
  emailTool          EmailTool[]
  emailLists         EmailList[]
  social             Social[]
  campaign           Campaign[]
  connectors         Connectors[]
  files              Files[]
  emailContact       EmailContact[]
  knowledgeBase      KnowledgeBase[]
  contactList        ContactList[]
  productLaunchData  ProductLaunchData[]
  posts              Post[]
  comment            Comment[]
  sponsors           Sponsors[]
  Category           Category[]
}

model Post {
  id               Int            @id @default(autoincrement())
  title            String?
  featureImage     String?
  contentImage     String?
  views            Int            @default(0)
  createdAt        DateTime       @default(now())
  description      String?
  crossPromote     String?
  slug             String?        @unique
  selectedValue    String?
  paramsId         String?
  image            String?
  updatedAt        DateTime       @updatedAt
  selectedFeatures String[]
  published        Boolean        @default(false)
  content          String?
  email            String?
  comments         Comment[]
  aiResponses      AiResponse[]
  sponsors         Sponsors[]
  author           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categorySlug     String?
  blogger          String?
  userId           Int?
  category         Category?      @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  images           ImageOnPost[]
  AvatarOnPost     AvatarOnPost[]
}

model VerificationToken {
  id          Int       @id @default(autoincrement())
  userId      Int
  token       String    @unique
  email       String    @unique
  expires     DateTime
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  teamId      Int?
  Team        Team?     @relation(fields: [teamId], references: [id])

  @@unique([userId, token])
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  // Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?
  Team      Team?    @relation(fields: [teamId], references: [id])
}

model RecentUpdates {
  id      Int       @id @default(autoincrement())
  Updates Update[]
  User    User?     @relation(fields: [userId], references: [id])
  userId  Int?
  History History[]
}

model CampaignHistory {
  id      Int       @id @default(autoincrement())
  History History[]
  User    User?     @relation(fields: [userId], references: [id])
  userId  Int?
}

model Update {
  id              Int            @id @default(autoincrement())
  Update          String?
  RecentUpdates   RecentUpdates? @relation(fields: [recentUpdatesId], references: [id])
  recentUpdatesId Int?
}

model History {
  id                Int              @id @default(autoincrement())
  History           String?
  campaignHistory   CampaignHistory? @relation(fields: [campaignHistoryId], references: [id])
  campaignHistoryId Int?
  recentUpdates     RecentUpdates?   @relation(fields: [recentUpdatesId], references: [id])
  recentUpdatesId   Int?
}

model Team {
  id                 Int                 @id @default(autoincrement())
  email              String?             @unique
  name               String?
  firstName          String?
  lastName           String?
  isVerified         Boolean?
  password           String?
  image              String?
  Profile            Profile[]
  emailLists         EmailList[]
  emailTool          EmailTool[]
  member             User?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role               Role                @default(MEMBER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  teamId             Int?
  userId             Int?
  verificationTokens VerificationToken[]
  campaign           Campaign[]
  connectors         Connectors[]
  knowledgeBase      KnowledgeBase[]
  contactList        ContactList[]
}

model ProductLaunchData {
  id           Int      @id @default(autoincrement())
  userId       Int?
  feature01    String?
  title        String?
  feature02    String?
  feature03    String?
  demographic  String?
  company      String?
  geographic   String?
  job_title    String?
  about        String?
  objectives   String?
  client_type  String?
  pain_point01 String?
  pain_point02 String?
  pain_point03 String?
  pain_point04 String?
  unique01     String?
  unique02     String?
  unique03     String?
  unique04     String?
  tool01       String?
  tool02       String?
  tool03       String?
  tool04       String?
  website      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?    @relation(fields: [userId], references: [id])
}

model EmailContact {
  id        Int      @id @default(autoincrement())
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Event {
  id   Int    @id @default(autoincrement())
  type String
  data Json
}

model Submission {
  id          Int        @id @default(autoincrement())
  fullName    String
  website     String
  email       String
  description String
  Sponsors    Sponsors[]
}

model Image {
  id       Int           @id @default(autoincrement())
  name     String
  mimeType String
  data     Bytes
  title    String
  posts    ImageOnPost[]
}

model ImageOnPost {
  id      Int   @id @default(autoincrement())
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int
  image   Image @relation(fields: [imageId], references: [id])
  imageId Int
}

model AvatarOnPost {
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int
  // avatar   Avatar @relation(fields: [avatarId], references: [id])
  avatarId String
}

model Category {
  id     Int     @id @default(autoincrement())
  title  String?
  slug   String  @unique
  posts  Post[]
  user   User?   @relation(fields: [userId], references: [id])
  userId Int?
}

model Comment {
  id         Int         @id @default(autoincrement())
  title      String?
  content    String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  postSlug   String?
  aiResponse String?
  postId     Int?
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userEmail  String?
  userId     Int?
  AiResponse AiResponse?
  Post       Post?       @relation(fields: [postId], references: [id])
}

model AiResponse {
  id                 Int      @id @default(autoincrement())
  title              String?
  comment            String?
  commentBy          String?
  response           String?
  commentingSystemId Int?
  comments           Comment? @relation(fields: [articleCommentId], references: [id])
  articleCommentId   Int?     @unique
  post               Post?    @relation(fields: [postId], references: [id])
  postId             Int?
}

model Sponsors {
  id           Int         @id @default(autoincrement())
  title        String?
  postId       Int?
  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId Int?
  Post         Post?       @relation(fields: [postId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
  userId       Int?
}

model EmailTool {
  id                  Int      @id @default(autoincrement())
  email               String
  subjectLine         String?
  emailBody           String?
  productImage        String?
  productDescritption String?
  productUrl          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  files               Files[]
  user                User     @relation(fields: [userId], references: [id])
  Team                Team?    @relation(fields: [teamId], references: [id])
  teamId              Int?

  embedding Unsupported("vector(1536)")?
}

model Campaign {
  id                  Int      @id @default(autoincrement())
  email               String
  title               String?
  subjectLine         String?
  emailBody           String?
  productImage        String?
  productDescritption String?
  productUrl          String?
  category            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  files               Files[]
  user                User     @relation(fields: [userId], references: [id])
  Team                Team?    @relation(fields: [teamId], references: [id])
  teamId              Int?

  embedding Unsupported("vector(1536)")?
}

model KnowledgeBase {
  id        Int      @id @default(autoincrement())
  url       String?
  type      String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  files     Files[]
  user      User     @relation(fields: [userId], references: [id])
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?

  embedding Unsupported("vector(1536)")?
}

// Uploaded
model ContactList {
  id        Int      @id @default(autoincrement())
  url       String?
  type      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  files     Files[]
  user      User     @relation(fields: [userId], references: [id])
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?

  embedding Unsupported("vector(1536)")?
}

model Connectors {
  id                  Int      @id @default(autoincrement())
  email               String
  subjectLine         String?
  emailBody           String?
  productImage        String?
  productDescritption String?
  productUrl          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              Int
  files               Files[]
  user                User     @relation(fields: [userId], references: [id])
  Team                Team?    @relation(fields: [teamId], references: [id])
  teamId              Int?

  embedding Unsupported("vector(1536)")?
}

model Files {
  id              Int                          @id @default(autoincrement())
  emailToolId     Int?
  EmailTool       EmailTool?                   @relation(fields: [emailToolId], references: [id])
  embedding       Unsupported("vector(1536)")?
  Campaign        Campaign?                    @relation(fields: [campaignId], references: [id])
  campaignId      Int?
  Connectors      Connectors?                  @relation(fields: [connectorsId], references: [id])
  connectorsId    Int?
  filename        String?
  KnowledgeBase   KnowledgeBase?               @relation(fields: [knowledgeBaseId], references: [id])
  knowledgeBaseId Int?
  ContactList     ContactList?                 @relation(fields: [contactListId], references: [id])
  contactListId   Int?
  User            User?                        @relation(fields: [userId], references: [id])
  userId          Int?
}

model TrialProspect {
  id        Int     @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model EmailList {
  id        Int                          @id @default(autoincrement())
  email     String
  userId    Int?
  User      User?                        @relation(fields: [userId], references: [id])
  Team      Team?                        @relation(fields: [teamId], references: [id])
  teamId    Int
  embedding Unsupported("vector(1536)")?
}

model TrialProspectTwo {
  id        Int     @id @default(autoincrement())
  emai      String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model ForgedAI {
  id                  Int                         @id @default(autoincrement())
  product             String?
  useCaseTwo          String
  useCase             String
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  marketing_Creatives Marketing_Creatives_files[]
  marketingPlan       Marketing_Plan_files[]
  trends              Trends_files[]
}

model Brand {
  id        Int    @id @default(autoincrement())
  brandName String
  email     String
}

model Blogger {
  id        Int      @id @default(autoincrement())
  BloggerId String?
  social    Social[]
  email     String
}

model Social {
  id        Int      @id @default(autoincrement())
  facebook  String?
  twitch    String?
  tiktok    String?
  google    String?
  twitter   String?
  Blogger   Blogger? @relation(fields: [BloggerId], references: [id])
  BloggerId Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Contact {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  company   String
  email     String
  message   String
}

model MaaP {
  id Int @id @default(autoincrement())
}

model Trends_files {
  id        Int                          @id @default(autoincrement())
  content   String
  url       String?
  iaId      Int
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  aiTools   ForgedAI                     @relation(fields: [iaId], references: [id])
  embedding Unsupported("vector(1536)")?
}

model Marketing_Plan_files {
  id            Int                          @id @default(autoincrement())
  content       String
  url           String?
  planId        Int
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  marketingPlan ForgedAI                     @relation(fields: [planId], references: [id])
  embedding     Unsupported("vector(1536)")?
}

model Marketing_Creatives_files {
  id          Int                          @id @default(autoincrement())
  content     String
  url         String?
  creativesId Int
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  creatives   ForgedAI                     @relation(fields: [creativesId], references: [id])
  embedding   Unsupported("vector(1536)")?
}

enum Role {
  USER
  MANAGER
  MEMBER
  ADMIN
  BLOGGER
}
