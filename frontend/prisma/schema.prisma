generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_DATABASE_URL")
  extensions = [citext(schema: "public")]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  api_domain        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  userId        String?     @unique
  name          String?
  externalId    String?
  Username      String?
  firstName     String?
  lastName      String?
  profileImage  String?
  role          Role        @default(USER)
  image         String?
  emailVerified DateTime?
  email         String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profileId     String?
  Accounts      Account[]
  EmailTool     EmailTool[]
  Profile       Profile[]
  Sessions      Session[]
}

model Profile {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id   String @unique @default(uuid())
  type String
  data Json
}

model EmailTool {
  id                  String     @unique @default(uuid())
  email               String
  subjectLine         String?
  emailBody           String?
  productImage        String?
  productDescritption String?
  productUrl          String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              String
  document            Document[]
  user                User       @relation(fields: [userId], references: [id])
}

model Document {
  id          Int        @id @default(autoincrement())
  emailToolId String?
  EmailTool   EmailTool? @relation(fields: [emailToolId], references: [id])
}

model TrialProspect {
  id        Int     @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model emailList {
  id    Int    @id @default(autoincrement())
  email String
}

model TrialProspectTwo {
  id        Int     @id @default(autoincrement())
  emai      String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model ForgedAI {
  id                  String                         @unique @default(uuid())
  product             String?
  useCaseTwo          String
  useCase             String
  createdAt           DateTime                       @default(now())
  updatedAt           DateTime                       @updatedAt
  marketing_Creatives Marketing_Creatives_Document[]
  marketingPlan       Marketing_Plan_Document[]
  trends              Trends_Document[]
}

model Contact {
  id        String @unique @default(uuid())
  firstName String
  lastName  String
  company   String
  email     String
  message   String
}

model Trends_Document {
  id        String   @unique @default(uuid())
  content   String
  url       String?
  iaId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  aiTools   ForgedAI @relation(fields: [iaId], references: [id])
}

model Marketing_Plan_Document {
  id            String   @unique @default(uuid())
  content       String
  url           String?
  planId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  marketingPlan ForgedAI @relation(fields: [planId], references: [id])
}

model Marketing_Creatives_Document {
  id          String   @unique @default(uuid())
  content     String
  url         String?
  creativesId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatives   ForgedAI @relation(fields: [creativesId], references: [id])
}

enum Role {
  USER
  ADMIN
}
