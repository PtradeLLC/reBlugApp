generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  api_domain        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserType          String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  userId             String?             @unique
  name               String?
  externalId         String?
  brandName          String?
  firstName          String?
  profileImage       String?
  isActive           Boolean             @default(false)
  brandLogo          String?
  password           String?
  image              String? //Auth
  lastName           String?
  isVerified         Boolean?
  provider           String?
  email              String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  profileId          String?
  role               Role                @default(MANAGER)
  emailVerified      DateTime?
  RecentUpdates      RecentUpdates[]
  CampaignHistory    CampaignHistory[]
  Accounts           Account[]
  Team               Team[]
  EmailTool          EmailTool[]
  Profile            Profile[]
  Sessions           Session[]
  EmailLists         emailList[]
  VerificationTokens VerificationToken[]
  social             Social[]
  userType           String?

  embedding Unsupported("vector(1536)")?
}

model RecentUpdates {
  id      String    @unique @default(uuid())
  Updates Update[]
  User    User?     @relation(fields: [userId], references: [id])
  userId  String?
  History History[]
}

model CampaignHistory {
  id      String    @unique @default(uuid())
  History History[]
  User    User?     @relation(fields: [userId], references: [id])
  userId  String?
}

model Update {
  id              String         @unique @default(uuid())
  Update          String?
  RecentUpdates   RecentUpdates? @relation(fields: [recentUpdatesId], references: [id])
  recentUpdatesId String?
}

model History {
  id                String           @unique @default(uuid())
  History           String?
  CampaignHistory   CampaignHistory? @relation(fields: [campaignHistoryId], references: [id])
  campaignHistoryId String?
  RecentUpdates     RecentUpdates?   @relation(fields: [recentUpdatesId], references: [id])
  recentUpdatesId   String?
}

model Team {
  id                 String              @unique @default(uuid())
  email              String?             @unique
  name               String?
  firstName          String?
  lastName           String?
  isVerified         Boolean?
  password           String?
  image              String?
  Profile            Profile[]
  EmailLists         emailList[]
  EmailTool          EmailTool[]
  member             User?               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  role               Role                @default(MEMBER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  teamId             String?
  userId             String?
  VerificationTokens VerificationToken[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
}

model VerificationToken {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  email       String    @unique
  expires     DateTime
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  Team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?

  @@unique([userId, token])
}

model Event {
  id   String @unique @default(uuid())
  type String
  data Json
}

model EmailTool {
  id                  String     @unique @default(uuid())
  email               String
  subjectLine         String?
  emailBody           String?
  productImage        String?
  productDescritption String?
  productUrl          String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  userId              String
  document            Document[]
  user                User       @relation(fields: [userId], references: [id])
  Team                Team?      @relation(fields: [teamId], references: [id])
  teamId              String?

  embedding Unsupported("vector(1536)")?
}

model Document {
  id          Int                          @id @default(autoincrement())
  emailToolId String?
  EmailTool   EmailTool?                   @relation(fields: [emailToolId], references: [id])
  embedding   Unsupported("vector(1536)")?
}

model TrialProspect {
  id        Int     @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model emailList {
  id        Int                          @id @default(autoincrement())
  email     String
  userId    String?
  User      User?                        @relation(fields: [userId], references: [id])
  Team      Team?                        @relation(fields: [teamId], references: [id])
  teamId    String
  embedding Unsupported("vector(1536)")?
}

model TrialProspectTwo {
  id        Int     @id @default(autoincrement())
  emai      String
  firstName String
  lastName  String
  chatBot   String?
  image     String?
}

model ForgedAI {
  id                  String                         @unique @default(uuid())
  product             String?
  useCaseTwo          String
  useCase             String
  createdAt           DateTime                       @default(now())
  updatedAt           DateTime                       @updatedAt
  marketing_Creatives Marketing_Creatives_Document[]
  marketingPlan       Marketing_Plan_Document[]
  trends              Trends_Document[]
}

model Brand {
  id        String @unique @default(uuid())
  brandName String
  email     String
}

model Creator {
  id     String   @unique @default(uuid())
  social Social[]
  email  String
}

model Social {
  id        String   @unique @default(uuid())
  facebook  String?
  twitch    String?
  tiktok    String?
  google    String?
  twitter   String?
  Creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Contact {
  id        String @unique @default(uuid())
  firstName String
  lastName  String
  company   String
  email     String
  message   String
}

model MaaP {
  id String @unique @default(uuid())
}

model Trends_Document {
  id        String                       @unique @default(uuid())
  content   String
  url       String?
  iaId      String
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  aiTools   ForgedAI                     @relation(fields: [iaId], references: [id])
  embedding Unsupported("vector(1536)")?
}

model Marketing_Plan_Document {
  id            String                       @unique @default(uuid())
  content       String
  url           String?
  planId        String
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  marketingPlan ForgedAI                     @relation(fields: [planId], references: [id])
  embedding     Unsupported("vector(1536)")?
}

model Marketing_Creatives_Document {
  id          String                       @unique @default(uuid())
  content     String
  url         String?
  creativesId String
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  creatives   ForgedAI                     @relation(fields: [creativesId], references: [id])
  embedding   Unsupported("vector(1536)")?
}

enum Role {
  USER
  MANAGER
  MEMBER
  ADMIN
  CREATOR
}
