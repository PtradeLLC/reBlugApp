"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationExecutionValidation = void 0;
const OperationHandler_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandler");
class OperationExecutionValidation {
    constructor(handlerValidation, execution) {
        this.handlerValidation = handlerValidation;
        this.execution = execution;
    }
    execute(ctx, input) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO Add input schema validation
            const { inputValidation } = this.handlerValidation;
            const inputValidationResult = inputValidation
                .filter((validation) => !validation.condition(ctx, input))
                .map((validation) => validation.errorMessage(ctx, input));
            if (inputValidationResult.length > 0) {
                return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.userInputError(inputValidationResult.join(', ')));
            }
            const result = yield this.execution.execute(ctx, input);
            switch (result.isFailure) {
                case true:
                    return result;
                case false:
                    // TODO Add output schema validation
                    const { outputValidation } = this.handlerValidation;
                    const outputValidationResult = outputValidation
                        .filter((validation) => !validation.condition(ctx, input, result.value))
                        .map((validation) => validation.errorMessage(ctx, input, result.value));
                    if (outputValidationResult.length > 0) {
                        return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(outputValidationResult.join(', ')));
                    }
                    return result;
            }
        });
    }
}
exports.OperationExecutionValidation = OperationExecutionValidation;
