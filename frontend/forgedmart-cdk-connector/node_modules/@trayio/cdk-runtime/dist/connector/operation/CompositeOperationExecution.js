"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeOperationExecution = void 0;
const OperationHandler_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandler");
class CompositeOperationExecution {
    constructor(handlerInvocationFactory, handler) {
        this.handlerInvocationFactory = handlerInvocationFactory;
        this.handler = handler;
    }
    execute(ctx, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const handlerInvocation = this.handlerInvocationFactory(ctx);
            try {
                const result = yield this.handler.handlerFunction(ctx, input, handlerInvocation);
                return result;
            }
            catch (error) {
                if (this.isError(error)) {
                    return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(error.message));
                }
                if (typeof error === 'string') {
                    return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError(error));
                }
                return OperationHandler_1.OperationHandlerResult.failure(OperationHandler_1.OperationHandlerError.connectorError('Operation failed with unknown error'));
            }
        });
    }
    // TODO: Move to commons
    isError(error) {
        return (typeof error === 'object' &&
            !Array.isArray(error) &&
            error !== null &&
            error.message !== undefined);
    }
}
exports.CompositeOperationExecution = CompositeOperationExecution;
