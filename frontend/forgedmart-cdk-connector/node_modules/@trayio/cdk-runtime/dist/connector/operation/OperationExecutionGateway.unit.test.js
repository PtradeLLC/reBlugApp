"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const OperationHandlerSetup_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandlerSetup");
const OperationHandlerTest_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandlerTest");
const OperationHandler_1 = require("@trayio/cdk-dsl/connector/operation/OperationHandler");
require("./OperationHandlerTestRunner");
const T = __importStar(require("fp-ts/Task"));
const TE = __importStar(require("fp-ts/TaskEither"));
const function_1 = require("fp-ts/function");
const Http_1 = require("@trayio/commons/http/Http");
const stream_1 = require("stream");
const ExpressHttpServer_1 = require("@trayio/express/http/ExpressHttpServer");
const ExpressHttpController_1 = require("@trayio/express/http/ExpressHttpController");
const NodeFsFileStorage_1 = require("@trayio/commons/file/NodeFsFileStorage");
const fileStorage = new NodeFsFileStorage_1.NodeFsFileStorage('/tmp');
class TestControllerHttp {
    constructor() {
        this.getEndpoints = () => [
            {
                path: `/posts/:id`,
                method: Http_1.HttpMethod.Get,
                execute: (request) => {
                    const { id } = request.pathParams;
                    return T.of({
                        body: stream_1.Readable.from(JSON.stringify({
                            id: parseInt(id, 10),
                            title: 'test',
                        })),
                        headers: {},
                        statusCode: 200,
                    });
                },
            },
            {
                path: `/image-upload`,
                method: Http_1.HttpMethod.Post,
                execute: (request) => {
                    const { body } = request;
                    return (0, function_1.pipe)(fileStorage.write({
                        content: body,
                        key: 'test.ico',
                        metadata: {
                            name: 'test.ico',
                        },
                    }), TE.fold(() => T.of({
                        body: stream_1.Readable.from(JSON.stringify({
                            success: false,
                        })),
                        headers: {},
                        statusCode: 500,
                    }), () => T.of({
                        body: stream_1.Readable.from(JSON.stringify({
                            success: true,
                        })),
                        headers: {},
                        statusCode: 200,
                    })));
                },
            },
        ];
    }
}
const testHttpController = new ExpressHttpController_1.ExpressHttpController(new TestControllerHttp(), '/tmp');
describe('OperationExecutionGateway', () => {
    let server;
    beforeAll(() => {
        server = (0, ExpressHttpServer_1.startServer)([testHttpController], { port: 3000 });
    });
    afterAll(() => {
        server.close();
    });
    describe('get a product', () => {
        const getProductOperation = OperationHandlerSetup_1.OperationHandlerSetup.configureHandler((handler) => handler
            .addInputValidation((inputValidation) => inputValidation
            .condition((ctx, input) => input.id > 0)
            .errorMessage(() => 'id must be bigger than zero'))
            .usingHttp((http) => http
            .get('http://localhost:3000/posts/:id')
            .handleRequest((ctx, input, request) => request.addPathParameter('id', input.id.toString()).withoutBody())
            .handleResponse((ctx, input, response) => response.parseWithBodyAsJson())));
        OperationHandlerTest_1.OperationHandlerTestSetup.configureHandlerTest(getProductOperation, (handlerTest) => handlerTest
            .usingHandlerContext('test')
            .nothingBeforeAll()
            .testCase('should get a product', (testCase) => testCase
            .usingHandlerContext('test')
            .givenNothing()
            .when(() => ({ id: 2 }))
            .then(({ output }) => {
            const outputValue = OperationHandler_1.OperationHandlerResult.getSuccessfulValueOrFail(output);
            expect(outputValue.id).toEqual(2);
        })
            .finallyDoNothing())
            .testCase('should validate id', (testCase) => testCase
            .givenNothing()
            .when(() => ({ id: -1 }))
            .then(({ output }) => {
            expect(output.isFailure).toBe(true);
        })
            .finallyDoNothing())
            .nothingAfterAll());
    });
    describe('get a product as text', () => {
        const getProductOperationAsText = OperationHandlerSetup_1.OperationHandlerSetup.configureHandler((handler) => handler
            .addInputValidation((inputValidation) => inputValidation
            .condition((ctx, input) => input.id > 0)
            .errorMessage(() => 'id must be bigger than zero'))
            .usingHttp((http) => http
            .get('http://localhost:3000/posts/:id')
            .handleRequest((ctx, input, request) => request.addPathParameter('id', input.id.toString()).withoutBody())
            .handleResponse((ctx, input, response) => response.parseWithBodyAsText((text) => OperationHandler_1.OperationHandlerResult.success({ textField: text })))));
        OperationHandlerTest_1.OperationHandlerTestSetup.configureHandlerTest(getProductOperationAsText, (handlerTest) => handlerTest
            .usingHandlerContext('test')
            .nothingBeforeAll()
            .testCase('should get a product as text', (testCase) => testCase
            .usingHandlerContext('test')
            .givenNothing()
            .when(() => ({ id: 2 }))
            .then(({ output }) => {
            const outputValue = OperationHandler_1.OperationHandlerResult.getSuccessfulValueOrFail(output);
            expect(outputValue.textField).toContain(`"id":2`);
        })
            .finallyDoNothing())
            .testCase('should validate id', (testCase) => testCase
            .givenNothing()
            .when(() => ({ id: -1 }))
            .then(({ output }) => {
            expect(output.isFailure).toBe(true);
        })
            .finallyDoNothing())
            .nothingAfterAll());
    });
    describe('upload an image', () => {
        const uploadImageOperation = OperationHandlerSetup_1.OperationHandlerSetup.configureHandler((handler) => handler.usingHttp((http) => http
            .post('http://localhost:3000/image-upload')
            .handleRequest((ctx, input, request) => request.withBodyAsFile({
            name: 'test-image',
            url: 'https://tray.io/favicon.ico',
            mime_type: 'image/png',
            expires: 0,
        }))
            .handleResponse((ctx, input, response) => response.parseWithBodyAsJson())));
        OperationHandlerTest_1.OperationHandlerTestSetup.configureHandlerTest(uploadImageOperation, (handlerTest) => handlerTest
            .usingHandlerContext('test')
            .nothingBeforeAll()
            .testCase('should upload an image', (testCase) => testCase
            .usingHandlerContext('test')
            .givenNothing()
            .when(() => ({}))
            .then(({ output }) => {
            const outputValue = OperationHandler_1.OperationHandlerResult.getSuccessfulValueOrFail(output);
            expect(outputValue.success).toEqual(true);
        })
            .finallyDoNothing())
            .nothingAfterAll());
    });
    describe('download a file', () => {
        const downloadFileOperation = OperationHandlerSetup_1.OperationHandlerSetup.configureHandler((handler) => handler.usingHttp((http) => http
            .get('https://tray.io/favicon.ico')
            .handleRequest((ctx, input, request) => request.withoutBody())
            .handleResponse((ctx, input, response) => response.parseWithBodyAsFile((file) => OperationHandler_1.OperationHandlerResult.success(file)))));
        OperationHandlerTest_1.OperationHandlerTestSetup.configureHandlerTest(downloadFileOperation, (handlerTest) => handlerTest
            .usingHandlerContext('test')
            .nothingBeforeAll()
            .testCase('should download a file', (testCase) => testCase
            .usingHandlerContext('test')
            .givenNothing()
            .when(() => ({}))
            .then(({ output }) => {
            const outputValue = OperationHandler_1.OperationHandlerResult.getSuccessfulValueOrFail(output);
            expect(outputValue.url).toBeDefined();
            expect(outputValue.name).toBeDefined();
            expect(outputValue.mime_type).toBeDefined();
            expect(outputValue.expires).toBeDefined();
        })
            .finallyDoNothing())
            .nothingAfterAll());
    });
});
