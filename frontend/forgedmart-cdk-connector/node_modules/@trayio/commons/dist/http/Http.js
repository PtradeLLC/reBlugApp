"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMultiPartBody = exports.serializationFormatToHttpContentType = exports.HttpHeaders = exports.HttpHeader = exports.HttpContentType = exports.HttpMethod = void 0;
const O = __importStar(require("fp-ts/lib/Option"));
const function_1 = require("fp-ts/lib/function");
const Serialization_1 = require("../serialization/Serialization");
const getHeader = (headers, name) => O.fromNullable(headers[name.toLowerCase()]);
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["Get"] = "GET";
    HttpMethod["Put"] = "PUT";
    HttpMethod["Post"] = "POST";
    HttpMethod["Patch"] = "PATCH";
    HttpMethod["Delete"] = "DELETE";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
var HttpContentType;
(function (HttpContentType) {
    HttpContentType["Json"] = "application/json";
    HttpContentType["OctetStream"] = "application/octet-stream";
    HttpContentType["MultipartRequestBody"] = "multipart/form-data";
    HttpContentType["Text"] = "text/plain";
})(HttpContentType || (exports.HttpContentType = HttpContentType = {}));
var HttpHeader;
(function (HttpHeader) {
    HttpHeader["Authorization"] = "Authorization";
    HttpHeader["ContentType"] = "Content-Type";
    HttpHeader["Impersonation"] = "X-Tray-Admin-Impersonate";
    HttpHeader["UserAgent"] = "User-Agent";
    HttpHeader["ContentLength"] = "Content-Length";
})(HttpHeader || (exports.HttpHeader = HttpHeader = {}));
exports.HttpHeaders = {
    get: (headers, name) => getHeader(headers, name),
    extractBearerToken: (headers) => (0, function_1.pipe)(getHeader(headers, HttpHeader.Authorization), O.chain((header) => header.toLowerCase().startsWith('bearer ')
        ? O.fromNullable(header.substring(7))
        : O.fromNullable(null))),
};
exports.serializationFormatToHttpContentType = {
    [Serialization_1.SerializationFormat.Json]: HttpContentType.Json,
};
const isMultiPartBody = (body) => (body === null || body === void 0 ? void 0 : body.files) !== undefined;
exports.isMultiPartBody = isMultiPartBody;
